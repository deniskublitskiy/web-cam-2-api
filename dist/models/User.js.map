{"version":3,"sources":["models/User.js"],"names":["bcrypt","require","module","exports","bookshelf","User","Model","extend","tableName","hidden","hasTimestamps","contacts","belongsToMany","chats","virtuals","fullName","get","firstName","lastName","set","value","split","length","initialize","on","_beforeSaving","hasChanged","genSalt","then","hash","salt","toJSON","attributes","prototype","call","avatar","toString","login","email","password","toLowerCase","trim","fetch","user","compare","Promise","resolve","reject","isValid","status","message","model"],"mappings":"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","file":"User.js","sourcesContent":["const bcrypt = require('bcrypt');\r\n\r\nmodule.exports = function (bookshelf) {\r\n    let User = bookshelf.Model.extend(\r\n        {\r\n            tableName: 'users',\r\n            hidden: ['password'],\r\n            hasTimestamps: true,\r\n            contacts() {\r\n                return this.belongsToMany(User, 'users_connections', 'master_user_id', 'user_id');\r\n            },\r\n            chats() {\r\n                return this.belongsToMany('Chat', 'chat_members', 'user_id', 'chat_id');\r\n            },\r\n            virtuals: {\r\n                fullName: {\r\n                    get() {\r\n                        let firstName = this.get('firstName'),\r\n                            lastName = this.get('lastName');\r\n\r\n                        return firstName && lastName\r\n                            ? `${firstName} ${lastName}`\r\n                            : '';\r\n                    },\r\n\r\n                    set(value) {\r\n                        value = value.split(' ');\r\n                        if (value.length === 2) {\r\n                            this.set('firstName', value[0]);\r\n                            this.set('lastName', value[1]);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            initialize() {\r\n                this.on('saving', this._beforeSaving, this);\r\n            },\r\n\r\n            _beforeSaving() {\r\n                if (this.hasChanged('password')) {\r\n                    return bcrypt.genSalt(10)\r\n                        .then(salt =>\r\n                            bcrypt.hash(this.get('password'), salt)\r\n                        )\r\n                        .then(hash =>\r\n                            this.set('password', hash)\r\n                        );\r\n                }\r\n            },\r\n\r\n            toJSON() {\r\n                let attributes = bookshelf.Model.prototype.toJSON.call(this);\r\n                if (attributes.avatar) {\r\n                    attributes.avatar = attributes.avatar.toString();\r\n                }\r\n                return attributes;\r\n            }\r\n        },\r\n        {\r\n            login(email, password) {\r\n                return new this({\r\n                    email: email.toLowerCase().trim()\r\n                })\r\n                    .fetch()\r\n                    .then(user => {\r\n                        if (user) {\r\n                            return bcrypt.compare(password, user.get('password'))\r\n                                .then(isValid => new Promise((resolve, reject) =>\r\n                                    isValid\r\n                                        ? resolve(user)\r\n                                        : reject({status: 401, message: 'Invalid password.'})))\r\n                        }\r\n                        return Promise.reject()\r\n                    })\r\n\r\n            }\r\n        }\r\n    );\r\n\r\n    return bookshelf.model('User', User);\r\n};"]}
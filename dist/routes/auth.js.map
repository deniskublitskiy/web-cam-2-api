{"version":3,"sources":["routes/auth.js"],"names":["express","require","jwt","authRoutes","Router","User","module","exports","app","responseCredentials","user","status","res","payload","id","fullName","token","sign","get","expiresIn","json","data","toJSON","use","req","next","body","email","password","post","login","then","catch","save"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,MAAMD,QAAQ,cAAR,CAAZ;AACA,IAAME,aAAaH,QAAQI,MAAR,EAAnB;;eAEeH,QAAQ,iBAAR,C;IAARI,I,YAAAA,I;;AAEPC,OAAOC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC5B,aAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,MAAnC,EAA2CC,GAA3C,EAAgD;AAC5C,YAAIC,UAAU;AACVC,gBAAIJ,KAAKI,EADC;AAEVC,sBAAUL,KAAKK;AAFL,SAAd;AAIA,YAAIC,QAAQd,IAAIe,IAAJ,CAASJ,OAAT,EAAkBL,IAAIU,GAAJ,CAAQ,YAAR,CAAlB,EAAyC;AACjDC,uBAAWX,IAAIU,GAAJ,CAAQ,uBAAR;AADsC,SAAzC,CAAZ;AAGAN,YAAID,MAAJ,CAAWA,MAAX,EAAmBS,IAAnB,CAAwB;AACpBC,kBAAMX,KAAKY,MAAL,EADc;AAEpBN;AAFoB,SAAxB;AAIH;;AAEDb,eAAWoB,GAAX,CAAe,UAACC,GAAD,EAAMZ,GAAN,EAAWa,IAAX,EAAoB;AAAA,wBACPD,IAAIE,IADG;AAAA,YAC1BC,KAD0B,aAC1BA,KAD0B;AAAA,YACnBC,QADmB,aACnBA,QADmB;;AAE/B,YAAI,CAACD,KAAL,EAAY;AACR,mBAAOF,KAAK,EAACd,QAAQ,GAAT,EAAL,CAAP;AACH;AACD,YAAI,CAACiB,QAAL,EAAe;AACX,mBAAOH,KAAK,EAACd,QAAQ,GAAT,EAAL,CAAP;AACH;AACDc;AACH,KATD;;AAWAtB,eAAW0B,IAAX,CAAgB,QAAhB,EAA0B,UAACL,GAAD,EAAMZ,GAAN,EAAWa,IAAX,EAAoB;AAAA,yBAClBD,IAAIE,IADc;AAAA,YACrCC,KADqC,cACrCA,KADqC;AAAA,YAC9BC,QAD8B,cAC9BA,QAD8B;;AAE1CvB,aAAKyB,KAAL,CAAWH,KAAX,EAAkBC,QAAlB,EACKG,IADL,CACU;AAAA,mBAAQtB,oBAAoBC,IAApB,EAA0B,GAA1B,EAA+BE,GAA/B,CAAR;AAAA,SADV,EAEKoB,KAFL,CAEWP,IAFX;AAIH,KAND;;AAQAtB,eAAW0B,IAAX,CAAgB,SAAhB,EAA2B,UAACL,GAAD,EAAMZ,GAAN,EAAWa,IAAX,EAAoB;AAC3C,YAAIpB,IAAJ,CAASmB,IAAIE,IAAb,EACKO,IADL,GAEKF,IAFL,CAEU;AAAA,mBAAQtB,oBAAoBC,IAApB,EAA0B,GAA1B,EAA+BE,GAA/B,CAAR;AAAA,SAFV,EAGKoB,KAHL,CAGWP,IAHX;AAKH,KAND;;AAQA,WAAOtB,UAAP;AACH,CA3CD","file":"auth.js","sourcesContent":["const express = require('express');\r\nconst jwt = require('jsonwebtoken');\r\nconst authRoutes = express.Router();\r\n\r\nconst {User} = require('../models/index');\r\n\r\nmodule.exports = function (app) {\r\n    function responseCredentials(user, status, res) {\r\n        let payload = {\r\n            id: user.id,\r\n            fullName: user.fullName\r\n        };\r\n        let token = jwt.sign(payload, app.get('API_SECRET'), {\r\n            expiresIn: app.get('TOKEN_EXPIRATION_TIME')\r\n        });\r\n        res.status(status).json({\r\n            data: user.toJSON(),\r\n            token\r\n        });\r\n    }\r\n\r\n    authRoutes.use((req, res, next) => {\r\n        let {email, password} = req.body;\r\n        if (!email) {\r\n            return next({status: 400});\r\n        }\r\n        if (!password) {\r\n            return next({status: 400});\r\n        }\r\n        next();\r\n    });\r\n\r\n    authRoutes.post('/login', (req, res, next) => {\r\n        let {email, password} = req.body;\r\n        User.login(email, password)\r\n            .then(user => responseCredentials(user, 200, res))\r\n            .catch(next)\r\n\r\n    });\r\n\r\n    authRoutes.post('/signup', (req, res, next) => {\r\n        new User(req.body)\r\n            .save()\r\n            .then(user => responseCredentials(user, 203, res))\r\n            .catch(next)\r\n\r\n    });\r\n\r\n    return authRoutes;\r\n};"]}
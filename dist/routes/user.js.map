{"version":3,"sources":["routes/user.js"],"names":["io","userRoutes","get","req","res","next","Object","keys","query","forEach","key","decodeURIComponentX","offset","limit","countQuery","Users","createSearchQuery","q","searchQuery","Promise","all","fetch","count","users","status","json","contacts","toJSON","options","require","fields","columns","split","User","id","params","user","put","body","set","save","e","delete","then","destroy","withRelated","related","catch","post","contactId","message","attach","contact","to","findUserSocketId","emit","userId","sockets","connected","find","handshake","reserved","_","difference","paramName","i","paramValue","snakeCase","length","where","andWhere","whereIn","andWhereIn","sort","sorts","direction","charAt","slice","orderBy","express","decode","Router","str","out","arr","l","x","decodeURIComponent"],"mappings":"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","file":"user.js","sourcesContent":["const express = require('express');\r\nconst decode = require('urldecode');\r\nconst userRoutes = express.Router();\r\nconst {User, Users} = require('../models/index');\r\nconst _ = require('lodash');\r\n\r\nfunction decodeURIComponentX( str ) {\r\n    var out = '', arr, i = 0, l, x;\r\n    arr = str.split(/(%(?:D0|D1)%.{2})/);\r\n    for ( l = arr.length; i < l; i++ ) {\r\n        try {\r\n            x = decodeURIComponent( arr[i] );\r\n        } catch (e) {\r\n            x = arr[i];\r\n        }\r\n        out += x;\r\n    }\r\n    return out\r\n}\r\n\r\nexport default function (io) {\r\n    userRoutes.get('/', async (req, res, next) => {\r\n        Object.keys(req.query).forEach(key => req.query[key] = decodeURIComponentX(req.query[key]));\r\n        let {offset = 0, limit = 10} = req.query;\r\n        let countQuery = Users.query(q => createSearchQuery(q, req.query));\r\n        let searchQuery = Users.query(q => createSearchQuery(q, req.query)\r\n            .limit(limit)\r\n            .offset(offset)\r\n        );\r\n\r\n        try {\r\n            let [users, count] = await Promise.all([\r\n                searchQuery.fetch(),\r\n                countQuery.count()\r\n            ]);\r\n\r\n            res.status(200).json({\r\n                count,\r\n                contacts: users.toJSON()\r\n            });\r\n\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    userRoutes.get('/:id', async (req, res, next) => {\r\n        let options = {\r\n            require: true\r\n        };\r\n        let fields = req.query.fields;\r\n        if (fields) {\r\n            options.columns = fields.split(',')\r\n        }\r\n\r\n        try {\r\n            let user = await new User({\r\n                id: req.params.id\r\n            }).fetch(options);\r\n\r\n            res.status(200).json(user.toJSON());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    userRoutes.put('/:id', async (req, res, next) => {\r\n        let user = new User({\r\n            id: req.params.id\r\n        });\r\n\r\n        try {\r\n            user = await user.fetch();\r\n            Object.keys(req.body).forEach(key => user.set(key, req.body[key]));\r\n            user = await user.save();\r\n\r\n            res.status(200).json(user.toJSON());\r\n        } catch (e) {\r\n            next({status: 500, e})\r\n        }\r\n    });\r\n\r\n    userRoutes.delete('/:id', (req, res, next) => {\r\n        new User({\r\n            id: req.params.id\r\n        })\r\n            .fetch()\r\n            .then(user => {\r\n                if (user) {\r\n                    user.destroy();\r\n                    return res.status(200);\r\n                }\r\n                next({status: 404});\r\n            })\r\n    });\r\n\r\n    userRoutes.get('/:id/contacts', (req, res, next) => {\r\n        new User({\r\n            id: req.params.id\r\n        })\r\n            .fetch({\r\n                withRelated: ['contacts']\r\n            })\r\n            .then(user => {\r\n                res.status(200).json(user.related('contacts'));\r\n            })\r\n            .catch(next)\r\n    });\r\n\r\n    userRoutes.get('/:id/chats', async (req, res, next) => {\r\n        try {\r\n            let user = await new User({\r\n                id: req.params.id\r\n            }).fetch({\r\n                withRelated: ['chats']\r\n            });\r\n            res.status(200).json(user.related('chats'));\r\n        } catch(e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    userRoutes.post('/:id/contacts', async (req, res, next) => {\r\n        let {id: contactId} = req.body;\r\n        let {id} = req.params;\r\n\r\n        if (!id) {\r\n            return next({status: 400, message: 'Contact user must be specified'});\r\n        }\r\n        if (id == contactId) {\r\n            return next({status: 400, message: 'Impossible add yourself to contacts'});\r\n        }\r\n\r\n        try {\r\n            let user = new User({id});\r\n            user = await user.fetch();\r\n            await user.contacts().attach(contactId);\r\n\r\n            let contact = new User({id: contactId});\r\n            contact = await contact.fetch();\r\n            await contact.contacts().attach(id);\r\n\r\n            io.to(findUserSocketId(contactId))\r\n                .emit('connection_request', user.toJSON());\r\n\r\n            res.status(203).json(contact.toJSON());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    });\r\n\r\n    function findUserSocketId(userId) {\r\n        let sockets = io.sockets.connected;\r\n        return Object.keys(sockets)\r\n            .find(key =>\r\n                sockets[key].handshake.query.userId == userId\r\n            );\r\n    }\r\n\r\n    /**\r\n     * TODO Refactor it\r\n     * @param query\r\n     * @param params\r\n     * @returns {*}\r\n     */\r\n    function createSearchQuery(query, params) {\r\n        let reserved = ['sort', 'limit', 'offset'];\r\n        _.difference(_.keys(params), reserved).forEach((paramName, i) => {\r\n            let paramValue = params[paramName].split(',');\r\n            paramName = _.snakeCase(paramName);\r\n            if (paramValue.length === 1) {\r\n                if (i === 0) {\r\n                    query.where(paramName, 'LIKE', paramValue);\r\n                } else {\r\n                    query.andWhere(paramName, 'LIKE', paramValue);\r\n                }\r\n            } else {\r\n                if (i === 0) {\r\n                    query.whereIn(paramName, paramValue);\r\n                } else {\r\n                    query.andWhereIn(paramName, paramValue);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (params.sort) {\r\n            let sorts = params.sort.split(',');\r\n            sorts.forEach(sort => {\r\n                let direction = sort.charAt(0) === '-' ? 'desc' : 'asc';\r\n                if (direction === 'desc') {\r\n                    sort = sort.slice(1);\r\n                }\r\n                query.orderBy(sort, direction);\r\n\r\n            });\r\n        }\r\n\r\n        return query;\r\n    }\r\n\r\n    return userRoutes;\r\n}"]}
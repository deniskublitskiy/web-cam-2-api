{"version":3,"sources":["routes/chat.js"],"names":["io","transporter","router","get","req","res","next","Chats","fetch","chats","status","json","toJSON","Chat","id","params","withRelated","require","chat","post","body","save","members","length","message","attach","memberSockets","map","findSocketByUserId","forEach","parseInt","socket","handshake","query","userId","to","emit","join","send","delete","destroy","chatId","authorId","connected","sockets","socketId","Object","keys","find","key","obj","read","file","type","options","header","raw","groups","SheetNames","reduce","result","name","set","utils","sheet_to_json","Sheets","Map","forge","me","group","Promise","all","member","fullName","split","user","password","Math","random","toString","slice","firstName","lastName","email","mailOptions","from","subject","html","sendMail","error","info","console","log","messageId","response","push","filter","faker","Router"],"mappings":"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","file":"chat.js","sourcesContent":["import express from 'express';\r\nimport { Message, User } from '../models/index';\r\nimport xlsx from 'xlsx';\r\n\r\nconst faker = require('faker');\r\n\r\nconst {Chats, Chat} = require('../models/index');\r\n\r\nconst router = express.Router();\r\nimport delay from '../utils/delay-promise'\r\n\r\nexport default function (io, transporter) {\r\n    router.get('/', async (req, res, next) => {\r\n        try {\r\n            let chats = await new Chats().fetch();\r\n            res.status(200).json(chats.toJSON());\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    router.get('/:id', async (req, res, next) => {\r\n        try {\r\n            let chat = await new Chat({\r\n                id: req.params.id\r\n            }).fetch({\r\n                withRelated: ['members', 'messages'],\r\n                require: true\r\n            });\r\n\r\n            res.status(200).json(chat);\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n\r\n    });\r\n\r\n    router.post('/', async (req, res, next) => {\r\n        try {\r\n            let chat = await new Chat(req.body).save();\r\n            res.status(201).json(chat);\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    router.post('/:id/members', async (req, res, next) => {\r\n        let {members} = req.body;\r\n        let {id} = req.params;\r\n\r\n        if (!members || !members.length) {\r\n            return next({status: 400, message: 'Member id must be specified in body'});\r\n        }\r\n\r\n        try {\r\n            let chat = await new Chat({id}).fetch({withRelated: ['members']});\r\n            chat.members().attach(members);\r\n\r\n            let memberSockets = members\r\n                .map(id => findSocketByUserId(id));\r\n\r\n            memberSockets\r\n                .forEach(socket => {\r\n                    if (parseInt(socket.handshake.query.userId) !== chat.get('createdById')) {\r\n                        io.to(socket.id).emit('chat_invite', chat);\r\n                    }\r\n                    socket.join(`chat-room-${chat.get('id')}`);\r\n                });\r\n\r\n            res.status(201).send();\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    router.delete('/:id', async (req, res, next) => {\r\n        try {\r\n            let chat = await new Chat({\r\n                id: req.params.id\r\n            }).fetch();\r\n            chat.destroy();\r\n            res.status(204).send();\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    router.post('/:id/messages', async (req, res, next) => {\r\n        let chatId = req.params.id;\r\n        let params = {\r\n            chatId,\r\n            ...req.body\r\n        };\r\n\r\n        await delay(1000);\r\n        try {\r\n            let message = await new Message(params).save();\r\n            let socket = findSocketByUserId(req.body.authorId);\r\n            socket && socket.to(`chat-room-${chatId}`).emit('chat_message', message);\r\n            res.status(201).json(message);\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\n    function findSocketByUserId(userId) {\r\n        let connected = io.sockets.connected;\r\n        let socketId = Object.keys(connected)\r\n            .find(key => connected[key].handshake.query.userId == userId);\r\n\r\n        return connected[socketId];\r\n    }\r\n\r\n    /**\r\n     * TODO: Refactor!!! Optimize!!!\r\n     */\r\n    router.post('/import/xlsx', async (req, res) => {\r\n        let obj = xlsx.read(req.body.file, {\r\n            type: 'base64'\r\n        });\r\n        const options = {\r\n            header: 1,\r\n            raw: true\r\n        };\r\n        const groups = obj.SheetNames.reduce((result, name) =>\r\n                result.set(name, xlsx.utils.sheet_to_json(obj.Sheets[name], options)),\r\n            new Map()\r\n        );\r\n\r\n        let me = await User.forge({id: req.body.userId}).fetch();\r\n        groups.forEach(async (group, key) => {\r\n            let members = [];\r\n            await Promise.all(group.map(async member => {\r\n                if (member.length > 0) {\r\n                    let fullName = member[0].split(' ');\r\n                    let user, password = Math.random().toString(36).slice(-8);\r\n                    try {\r\n                        user = await User.forge({\r\n                            firstName: fullName[1],\r\n                            lastName: fullName[0],\r\n                            email: member[1],\r\n                            password\r\n                        }).save();\r\n                        let mailOptions = {\r\n                            from: '\"web-cam support\" <webcamera.sup@gmail.com>',\r\n                            to: member[1],\r\n                            subject: 'Account information',\r\n                            html: `<b>${me.get('fullName')}</b> create account for you. <div>password: <b>${password}</b></div>`\r\n                        };\r\n\r\n                        transporter.sendMail(mailOptions, (error, info) => {\r\n                            if (error) {\r\n                                return console.log(error);\r\n                            }\r\n                            console.log('Message %s sent: %s', info.messageId, info.response);\r\n                        });\r\n                    } catch(e) {\r\n                        user = await User.forge({\r\n                            email: member[1]\r\n                        }).fetch();\r\n                    } finally {\r\n                        members.push(user);\r\n                    }\r\n                }\r\n            }));\r\n            let chat = await new Chat({name: key}).save();\r\n            chat = await new Chat({id: chat.get('id')}).fetch({withRelated: ['members']});\r\n            members.push(me);\r\n            chat.members().attach(members);\r\n\r\n            let memberSockets = members\r\n                .map(member => findSocketByUserId(member.get('id')))\r\n                .filter(socketId => !!socketId);\r\n\r\n            memberSockets\r\n                .forEach(socket => {\r\n                    io.to(socket.id).emit('chat_invite', chat);\r\n                    socket.join(`chat-room-${chat.get('id')}`);\r\n                });\r\n\r\n            res.status(200).send();\r\n        });\r\n    });\r\n\r\n    return router;\r\n}"]}